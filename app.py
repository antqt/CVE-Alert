#!/usr/bin/python3
from telegram.ext import Updater
from operator import index
import requests
import yaml
from constants import BOT_TOKEN,CHAT_ID,DISCORD_URL
from discord_webhook import DiscordWebhook,DiscordEmbed

#import os
#os.chdir('/home/antqt/CVE-Alert/')

session = requests.session()

def send(messages):
	updater = Updater(token=BOT_TOKEN, use_context=True)
	for message in messages:
		updater.bot.send_message(chat_id=CHAT_ID, text=message)

def load_urls(links_path):
	with open(links_path) as f:
		data = yaml.load(f,Loader=yaml.FullLoader)
	return data

def load_config(yaml_path):
	with open(yaml_path) as f:
		config = yaml.load(f,Loader=yaml.FullLoader)
		host=config['host']
		tuple_location=config['tuple_location']

		data_location=config['data_location']
		number_rows=config['number_rows']
		pages=config['pages']
		empty_page=config['empty_page']

		report_location=config['report_location']
		api_link=config['api_link']

	return host,tuple_location,data_location,number_rows,pages,empty_page,report_location,api_link


def get_current_record(tuple_location,data_location,number_rows,api_link):
	all_res=''
	records={}

	
	all_res = session.get(api_link).json()
	all_tuples=all_res[tuple_location]

	for _tuple in all_tuples:
		data_list=[]
		data_on_1_line={}
		for _data_location in data_location:
			data_element ="" if data_location[_data_location] == "" else _tuple[data_location[_data_location]]
			data= "Pending" if data_element == None else data_element
			data_list.append(data)
		data_on_1_line[data_list[0]]=data_list[1:]
		records.update(data_on_1_line)

	return dict(list(records.items())[:number_rows])

def get_old_record(location):
	try:
		with open(location) as f:
			records = yaml.load(f,Loader=yaml.FullLoader)
	except:
		print("Can't find old records!")
		records={}

	return records

def write_yaml(destination,content):
	with open(destination, 'w') as file:
		yaml.dump(content, file)

def format_message(dictionary):
	message_list=[]
	info_list=[]
	for element in dictionary:
		affected=[sub['vendor'] for sub in dictionary[element][2]]
		published=dictionary[element][4].replace("T"," ").replace("Z"," ")
		modified=dictionary[element][5].replace("T"," ").replace("Z"," ")

		message="""
		New CVE: {}
		[+] Description: {}
		[+] Affected: {}
		[+] CVSS v3: {}
		[+] Published: {}
		[+] Modified: {}
		""".format(element,dictionary[element][1],", ".join(affected),dictionary[element][3],published,modified)
		message_list.append(message)

		info_list.append([element,dictionary[element][1],", ".join(affected),dictionary[element][3],published,modified])

	return message_list, info_list
	
def send_discord(info_list):
	for info in info_list:
		webhook = DiscordWebhook(url=DISCORD_URL, username="CVE-Alert")
		embed = DiscordEmbed(title=info[0], description=info[1], color='03b2f8')
		embed.add_embed_field(name='Affected', value=info[2])
		embed.add_embed_field(name='CVSS v3', value=info[3])
		embed.add_embed_field(name='Published', value=info[4])
		embed.add_embed_field(name='Modified', value=info[5])
		webhook.add_embed(embed)
		webhook.execute()

if __name__ == '__main__':
	urls = load_urls('resources/links.yaml')
	for url in urls:
		host,tuple_location,data_location,number_rows,pages,empty_page,report_location,api_link=load_config(urls[url])	
		old_record=get_old_record(report_location)
		current_record=get_current_record(tuple_location,data_location,number_rows,api_link)
		new_record= {**old_record, **current_record}
		diff = { _index : current_record[_index] for _index in current_record if _index in old_record and current_record[_index]!= old_record[_index] }
		diff.update({ index : current_record[index] for index in set(current_record) - set(old_record) })
		if(len(diff)!=0):
			message_list, info_list=format_message(diff)
			send_discord(info_list)
			send(message_list)
			write_yaml(report_location,new_record)

